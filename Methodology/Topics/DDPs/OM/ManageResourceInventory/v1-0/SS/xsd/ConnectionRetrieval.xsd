<?xml version="1.0" encoding="UTF-8"?>
<!-- mTOP DDP - OM ManageResourceInventory - Copyright TeleManagement Forum 2006 -->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="tmforum.mtop.om-mri.v1" xmlns:tns="tmforum.mtop.om-mri.v1" xmlns:mtop.fulfillment="tmforum.mtop.dm-fulfillment.v1" xmlns:mtop.basic="tmforum.mtop.dm-basic.v1" attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.0">
  <!-- ================ -->
  <xsd:import schemaLocation="../../../../../DM/Basic/v1-0/SS/xsd/AllDefinitions.xsd" namespace="tmforum.mtop.dm-basic.v1"/>
  <xsd:import schemaLocation="../../../../../DM/Fulfillment/v1-0/SS/xsd/AllDefinitions.xsd" namespace="tmforum.mtop.dm-fulfillment.v1"/>
  <!-- ================ -->
  <xsd:element name="getAllFixedSubnetworkConnectionNames">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllFixedSubnetworkConnectionNames operation</p>
        <p>This operation has exactly the same behaviour as getAllFixedSubnetworkConnections(), but instead of returning the entire object structures, this operation returns their names.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllFixedSubnetworkConnectionNamesResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllFixedSubnetworkConnectionNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllFixedSubnetworkConnectionNamesException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllFixedSubnetworkConnectionNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllFixedSubnetworkConnections">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllFixedSubnetworkConnections operation</p>
        <p>This operation has exactly the same behaviour as getAllSubnetworkConnections(), but instead returns only fixed SNCs object structures. See Subnetwork Connection Types for an explanation of fixed SNCs.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllFixedSubnetworkConnectionsResponse" type="tns:MultipleSncObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllFixedSubnetworkConnections operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllFixedSubnetworkConnectionsException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllFixedSubnetworkConnections operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised if the OS does not support this service
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when subnetName does not reference an multiLayerSubnetwork object or connectionRateList contains undefined values
EXCPT_ENTITY_NOT_FOUND - Raised when subnetName references object which does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionNames">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllSubnetworkConnectionNames operation</p>
        <p>This operation has exactly the same behaviour as getAllSubnetworkConnections but instead of returning the entire object structures, this operation returns their names.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionNamesResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllSubnetworkConnectionNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionNamesException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllSubnetworkConnectionNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnections">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllSubnetworkConnections operation</p>
        <p>This operation allows an NMS to request a list of the SNCs for the specified Subnetwork at the specified connectionRates. This operation also returns bundled SNCs, if any (see Bundled SNC overview for further details).</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionsResponse" type="tns:MultipleSncObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllSubnetworkConnections operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionsException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllSubnetworkConnections operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when subnetName does not reference an multiLayerSubnetwork object or connectionRateList contains undefined values
EXCPT_ENTITY_NOT_FOUND - Raised when subnetName references object which does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionNamesWithTP">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllSubnetworkConnectionNamesWithTP operation</p>
        <p>This operation has exactly the same behaviour as getAllSubnetworkConnections but instead of returning the entire object structures, this operation returns their names.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionNamesWithTPResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllSubnetworkConnectionNamesWithTP operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionNamesWithTPException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllSubnetworkConnectionNamesWithTP operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionsWithTP">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllSubnetworkConnectionsWithTP operation</p>
        <p>This operation allows an NMS to request a list of the SNCs using the specified termination point at the specified connection rates. A SNC is using the specified TP if any of its routes, intended and/or backup, in any state, use this TP. A TP may be a PTP in which case a full list of SNCs using any of its contained CTPs is required. A TP may be:
<ul>
            <li>a CTP, in which case SNCs using that CTP or any of its contained CTPs are required. This includes SNCs in which any of the referenced CTPs participate that match the specified connection rate filter.</li>
            <li>an FTP, in which case a full list of SNCs using the FTP or any of its contained CTPs is required. This includes SNCs in which the FTP or any of the referenced CTPs participate that match the specified connection rate filter.</li>
          </ul>
        </p>
        <p>All legs of a broadcast system can be retrieved using this operation where the source TP of the broadcast system is used as input to the operation.The output will be the list of individual SNCs that make up the broadcast system.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionsWithTPResponse" type="tns:MultipleSncObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllSubnetworkConnectionsWithTP operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSubnetworkConnectionsWithTPException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllSubnetworkConnectionsWithTP operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised if tpName does not reference a terminationPoint object or connectionRateList contains undefined values
EXCPT_ENTITY_NOT_FOUND - Raised when tpName references an object that does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSNC">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getSNC operation</p>
        <p>This operation will return the SubnetworkConnection structure for the SNC whose name is supplied as a parameter. This operations will provide a bundled SNC structure if the name provided is that of a bundled SNC (see Bundled SNC overview for further details).</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSNCResponse" type="tns:SingleSncObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getSNC operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSNCException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getSNC operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when sncName does not reference a subnetworkConnection object
EXCPT_ENTITY_NOT_FOUND - Raised when sncName references an SNC object that does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSNCsByUserLabel">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getSNCsByUserLabel operation</p>
        <p>This operation will return the SubnetworkConnection structures for the SNCs whose userLabel is supplied as a parameter. This operations will provide a bundled SNC structure if the name provided is that of a bundled SNC (see Bundled SNC overview for further details).</p>
        <p>This operation does not use multiple responses, since the number of SNCs returned is expected to be usually 1.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSNCsByUserLabelResponse" type="tns:MultipleSncObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getSNCsByUserLabel operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSNCsByUserLabelException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getSNCsByUserLabel operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllCrossConnections">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllCrossConnections operation</p>
        <p>This operation allows an NMS to request a list of the cross-connects for the specified managed element at the specified layer rates. This operation returns cross-connects between CTPs/FTPs.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllCrossConnectionsResponse" type="tns:MultipleCcObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllCrossConnections operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllCrossConnectionsException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllCrossConnections operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised if connectionRateList is empty or contains invalid rates, or if meName does not reference a managed element.
EXCPT_ENTITY_NOT_FOUND - Raised when meName references an ME object that does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllFixedCrossConnections">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllFixedCrossConnections operation</p>
        <p>This operation has exactly the same behaviour as getAllCrossConnections(), but instead returns only fixed Cross Connection object structures. See Subnetwork Connection Types for an explanation of fixed SNCs.</p>
        <p>A cross connection is identified as fixed using additional information. See Additional Information Usage for detail on additional information for SNCs, cross connections and TPs.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllFixedCrossConnectionsResponse" type="tns:MultipleCcObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllFixedCrossConnections operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllFixedCrossConnectionsException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllFixedCrossConnections operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised when OS does not support this service
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised if connectionRateList is empty or contains invalid rates, or if meName does not reference a managed element.
EXCPT_ENTITY_NOT_FOUND - Raised when meName references an ME object that does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getPotentialFixedCCs">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getPotentialFixedCCs operation</p>
        <p>The operation is used to retrieve fixed connection schemes related to normal and inverse multiplexing. See Subnetwork Connection Types for an explanation of fixed SNCs.</p>
        <p>The operation takes as an input a TP and if this TP may be or is involved in a multiplexing or inverse multiplexing scheme, it will report:
<ul>
            <li>The TP containing the fixed layer.</li>
            <li>the list of potential fixed cross connects that will exist if the containing TP's clientConnectivity or serverConnectivity is set to "Connected" (i.e. If the containing TP is set to multiplexing or inverse multiplexing).</li>
          </ul>
        </p>
        <p>If the clientConnectivity (resp. serverConnectivity) of the TP is currently set to "Connected", the potentialCCList matches the list of active fixed cross connects that involve its client TPs (resp. server TPs).</p>
        <p>If the TP client layer (resp. server layer) is always fixed cross connected (hard-wired), the potentialCCList always matches the list of active fixed cross connects that involve the client TPs (resp. server TPs).</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getPotentialFixedCCsResponse" type="tns:MultipleCcObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getPotentialFixedCCs operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getPotentialFixedCCsException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getPotentialFixedCCs operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised when OS does not support this service
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised if connectionRateList is empty or contains invalid rates, or if meName does not reference a managed element.
EXCPT_ENTITY_NOT_FOUND - Raised when meName references an ME object that does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getRoute">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getRoute operation</p>
        <p>This operation returns the route for the SNC whose name is specified as a parameter. This operation also works for bundled SNCs. In the case of a bundled SNC, the EMS returns the route betweens GTPs (see Bundled SNC overview for further details).</p>

<p>The route information, in the form of crossconnects, should identify the resources allocated to the SNC at the time of the request and the way in which these resources are used. For example, for a resilient SNC that is implemented in the subnetwork using subnetwork connection protection, all details of the route including normal and alternative paths should be provided. If the SNC is using some form of dynamic rerouting then it is clearly acceptable that the route include only the single thread of crossconnections that is supporting the traffic (as there may be many alternative potential paths that could be selected).</p>

<p>The NMS specifies if it wants to retrieve only resources in the layer of the SNC (the CCs that belong to the SNC), or higher order CCs also (the CCs of other SNCs that are used to carry the traffic of the queried SNC). The ability to retrieve higher order CCs is optional.</p>

<p>All cross-connections allocated to the SNC must be returned, even if they are not active in the managed elements. This allows the NMS to query the route that will be used before activating an SNC.</p>

<p>If the SNC has more alternative routes, then it retrieves the intended route if the SNC is pending or partial, otherwise it retrieves the active route. This because there can be more partial routes and no active route, in such case the intended route is replied, as it is not known which of the partial routes is the candidate for becoming the active route.</p>
        <p>In the first CrossConnect_T (first XC is the one involving A1 end point of the SNC) record of the replied sequence the following parameters may be present:</p>
        <p>
          <ul>name="RouteId"; value="id" 
<li>name="RouteIntended "; value="y" | "n" </li>
            <li>name="RouteActualState"; value="inactive" | "partial" | "active" </li>
            <li>name="RouteAdminState"; value="locked" | "unlocked" </li>
            <li>name="RouteInUse"; value="y" | "n" </li>
            <li>name="RouteExclusive"; value="y" | "n"</li>
          </ul>
        </p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getRouteResponse" type="tns:SingleRouteObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getRoute operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getRouteException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getRoute operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service
EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal failure
EXCPT_INVALID_INPUT - Raised when sncName does not reference a subnetworkConnection object
EXCPT_ENTITY_NOT_FOUND - Raised when sncName references an SNC object that does not exist
EXCPT_UNABLE_TO_COMPLY - Raised when the provided value for includeHigherOrderCCs is "True" and EMS is not able to provide higher order CCs in the reply
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================= -->
  <!-- Definitions of Iterator messages for Object and Object Name retrievals  -->
  <!-- ================= -->
  <xsd:element name="getSncIterator" type="mtop.basic:GetAllDataIterator_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getSncIterator operation</p>
        <p>This is the iterator request to return the next batch of SNCs from the OS to which an SNC retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getSncIteratorResponse" type="tns:MultipleSncObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getSncIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getSncIteratorException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getSncIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <xsd:element name="getSncNamesIterator" type="mtop.basic:GetAllDataIterator_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getSncNamesIterator operation</p>
        <p>This is the iterator request to return the next batch of SNC names from the OS to which an SNC names retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getSncNamesIteratorResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getSncNamesIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getSncNamesIteratorException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getSncNamesIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <xsd:element name="getCcIterator" type="mtop.basic:GetAllDataIterator_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getCcIterator operation</p>
        <p>This is the iterator request to return the next batch of CCs from the OS to which an CC retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getCcIteratorResponse" type="tns:MultipleCcObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getCcIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getCcIteratorException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getCcIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <!-- Type Definitions of various Object responses  -->
  <!-- ================= -->
  <xsd:complexType name="SingleSncObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a single SNC object</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="mtop.basic:CommonMessage_T">
        <xsd:sequence>
          <xsd:element name="snc" type="mtop.fulfillment:SubnetworkConnection_T" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                <p>The retrieved SNC</p>
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!-- ================== -->
  <xsd:complexType name="MultipleSncObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a set of SNC objects</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="mtop.basic:CommonMessage_T">
        <xsd:sequence>
          <xsd:element name="sncList" type="mtop.fulfillment:SubnetworkConnectionList_T" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                <p>The list of SNCs</p>
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!-- ================ -->
  <xsd:complexType name="SingleCcObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a single CC object</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="mtop.basic:CommonMessage_T">
        <xsd:sequence>
          <xsd:element name="cc" type="mtop.fulfillment:CrossConnect_T" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                <p>The retrieved CC</p>
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!-- ================== -->
  <xsd:complexType name="MultipleCcObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a set of CC objects</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="mtop.basic:CommonMessage_T">
        <xsd:sequence>
          <xsd:element name="ccList" type="mtop.fulfillment:CrossConnectList_T" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                <p>The list of CCs</p>
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!-- ================ -->
  <xsd:complexType name="SingleRouteObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a single Route object</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="mtop.basic:CommonMessage_T">
        <xsd:sequence>
          <xsd:element name="route" type="mtop.fulfillment:Route_T" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                <p>The retrieved Route</p>
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!-- ================== -->
</xsd:schema>
