<?xml version="1.0" encoding="UTF-8"?>
<!-- mTOP DDP - OM ManageResourceInventory - Copyright TeleManagement Forum 2006 -->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="tmforum.mtop.om-mri.v1" xmlns:tns="tmforum.mtop.om-mri.v1" xmlns:mtop.fulfillment="tmforum.mtop.dm-fulfillment.v1" xmlns:mtop.basic="tmforum.mtop.dm-basic.v1" attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.0">
  <!-- ================ -->
  <xsd:import schemaLocation="../../../../../DM/Basic/v1-0/SS/xsd/AllDefinitions.xsd" namespace="tmforum.mtop.dm-basic.v1"/>
  <xsd:import schemaLocation="../../../../../DM/Fulfillment/v1-0/SS/xsd/AllDefinitions.xsd" namespace="tmforum.mtop.dm-fulfillment.v1"/>
  <!-- ================ -->
  <xsd:element name="getAllTopologicalLinkNames">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllTopologicalLinkNames operation</p>
        <p>This operation has exactly the same behaviour as getAllTopologicalLinks but instead of returning the entire object structures, this operation returns their names.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopologicalLinkNamesResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllTopologicalLinkNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopologicalLinkNamesException" type="mtop.basic:GetAllObjectNamesException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllTopologicalLinkNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopologicalLinks">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllTopologicalLinks operation</p>
        <p>This operation returns a list of TopologicalLinks which exist inside the Subnetwork whose name is passed as a parameter. For singletons, no topologicalLinks will be returned. The OS should report topological links at the "lowest" layer (i.e. closest to physical) about which it has accurate knowledge.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopologicalLinksResponse" type="tns:MultipleTlObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for TL retrieval operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopologicalLinksException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllTopologicalLinks operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised if OS cannot support this service
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when subnetName does not reference a multiLayerSubnetwork object
EXCPT_ENTITY_NOT_FOUND - Raised when subnetName references an object that does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getTopologicalLink">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getTopologicalLink operation</p>
        <p>This operation returns a subnetwork topological link given its name.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getTopologicalLinkResponse" type="tns:SingleTlObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getTopologicalLink operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getTopologicalLinkException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getTopologicalLink operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised if OS cannot support this service
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when topoLinkName does not reference a subnetwork topologicallink object
EXCPT_ENTITY_NOT_FOUND - Raised when topoLinkName references a subnetwork topological link object that does not exist
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getRouteAndTopologicalLinks">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getRouteAndTopologicalLinks operation</p>
        <p>Like getRoute(), this service returns the route, in terms of crossconnects, for the SNC whose name is specified as a parameter. This service also returns the list of topological links for that SNC that are used in the route.</p>
        <p>All topological links that the traffic of the SNC travel across are returned including the links that connect to the terminating PTP and/or TP containing the termination TP.</p>
        <p>The route information, in the form of crossconnects, should identify the resources allocated to the SNC at the time of the request and the way in which these resources are used. For example, for a resilient SNC that is implemented in the subnetwork using subnetwork connection protection, all details of the route including normal and alternative paths should be provided. If the SNC is using some form of dynamic rerouting then it is clearly acceptable that the route include only the single thread of crossconnections that is supporting the traffic (as there may be many alternative potential paths that could be selected).</p>
        <p>The list of Topological links can be used in conjunction with the crossconnects to lay out the entire route through the subnetwork.</p>
        <p>Unlike getRoute(), this service always retrieves resources in all layers that support the route. This includes all crossconnects of the SNC (i.e. the crossconnects SNC) and all higher order crossconnects (i.e. the crossconnects of server SNCs that are used to carry the traffic of the queried SNC). It also includes all topological links (at any layer) that any traffic of the SNC passes across. </p>
        <p>All crossconnects allocated to the SNC must be returned, even if they are not active in the managed elements. This allows the NMS to query the route that will be used before activating the SNC. </p>
        <p>If the SNC has more alternative routes, then it retrieves the intended route if the SNC is pending or partial, otherwise it retrieves the active route. This because there can be more partial routes and no active route, in such case the intended route is replied, as it is not known which of the partial routes is the candidate for becoming the active route.</p>
        <p>In the first CrossConnect_T (first XC is the one involving A1 end point of the SNC) record of the replied sequence the following parameters may be present:</p>
        <p>
          <ul>name="RouteId"; value="id" 
<li>name="RouteIntended "; value="y" | "n" </li>
            <li>name="RouteActualState"; value="inactive" | "partial" | "active" </li>
            <li>name="RouteAdminState"; value="locked" | "unlocked" </li>
            <li>name="RouteInUse"; value="y" | "n" </li>
            <li>name="RouteExclusive"; value="y" | "n"</li>
          </ul>
        </p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getRouteAndTopologicalLinksResponse">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getRouteAndTopologicalLinks operation</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getRouteAndTopologicalLinksException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getRouteAndTopologicalLinks operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised if the OS does not support this service
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when sncName does not reference a subnetworkConnection object
EXCPT_ENTITY_NOT_FOUND - Raised when sncName references a subnetworkConnection object that does not exist
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLNamesBetweenMDs">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllTLNamesBetweenMDs operation</p>
        <p>This operation returns the name of each TopologicalLink (TL) with end points in two different ManagementDomains (MDs) which are managed by the addressed top-level OS.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLNamesBetweenMDsResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllTLNamesBetweenMDs operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLNamesBetweenMDsException" type="mtop.basic:GetAllObjectNamesException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllTLNamesBetweenMDs operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLsBetweenMDs">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllTLsBetweenMDs operation</p>
        <p>This operation returns all the TopologicalLink (TL) objects with end points in two different ManagementDomains (MDs) which are managed by the addressed top-level OS.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLsBetweenMDsResponse" type="tns:MultipleTlObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllTLsBetweenMDs operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLsBetweenMDsException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllTLsBetweenMDs operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised when the OS does not support this operation
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLNamesWrtOS">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllTLNamesWrtOS operation</p>
        <p>This operation returns the name of each Topological Link (TL) managed by a given subordinate OS AND contained by a specific Management Domain. Note that Wrt in the name of the operation stands for "with respect to".</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLNamesWrtOSResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllTLNamesWrtOS operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLNamesWrtOSException" type="mtop.basic:GetAllObjectNamesException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllTLNamesWrtOS operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLsWrtOS">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllTLsWrtOS operation</p>
        <p>This operation returns the data structure for each Topological Link (TL) managed by a given subordinate OS AND contained by a specific Management Domain. Note that Wrt in the name of the operation stands for "with respect to".</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLsWrtOSResponse" type="tns:MultipleTlObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllTLsWrtOS operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTLsWrtOSException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllTLsWrtOS operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised when the OS does not support this operation
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically incorrect
EXCPT_ENTITY_NOT_FOUND - Raised when the provided subordinate OS or the provided MD does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopLevelTopologicalLinkNames">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllTopLevelTopologicalLinkNames operation</p>
        <p>This operation returns the names of the TLs between the subnetworks contained by the MD to which the operation is directed.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopLevelTopologicalLinkNamesResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllTopLevelTopologicalLinkNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopLevelTopologicalLinkNamesException" type="mtop.basic:GetAllObjectNamesException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllTopLevelTopologicalLinkNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopLevelTopologicalLinks">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllTopLevelTopologicalLinks operation</p>
        <p>This operation returns the TLs between the subnetworks contained by the MD to which the operation is directed.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopLevelTopologicalLinksResponse" type="tns:MultipleTlObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllTopLevelTopologicalLinks operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllTopLevelTopologicalLinksException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllTopLevelTopologicalLinks operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised when the OS does not support this operation
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getTopLevelTopologicalLink">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getTopLevelTopologicalLink operation</p>
        <p>This operation returns a top level topological link given its name.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getTopLevelTopologicalLinkResponse" type="tns:SingleTlObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getTopLevelTopologicalLink operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getTopLevelTopologicalLinkException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getTopLevelTopologicalLink operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised when the OS does not support this operation
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically incorrect
EXCPT_ENTITY_NOT_FOUND - Raised when topoLinkName references a top level topological link object that does not exist
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================= -->
  <!-- Definitions of Iterator messages for Object and Object Name retrievals  -->
  <!-- ================= -->
  <xsd:element name="getTlIterator" type="mtop.basic:GetAllDataIterator_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getTlIterator operation</p>
        <p>This is the iterator request to return the next batch of TLs from the OS to which an TL retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getTlIteratorResponse" type="tns:MultipleTlObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getTlIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getTlIteratorException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getTlIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <xsd:element name="getTlNamesIterator" type="mtop.basic:GetAllDataIterator_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getTlNamesIterator operation</p>
        <p>This is the iterator request to return the next batch of TL names from the OS to which an TL retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getTlNamesIteratorResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getTlNamesIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getTlNamesIteratorException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getTlNamesIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <!-- Type Definitions of various Object responses  -->
  <!-- ================= -->
  <xsd:complexType name="SingleTlObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a single TL object</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="mtop.basic:CommonMessage_T">
        <xsd:sequence>
          <xsd:element name="tl" type="mtop.fulfillment:TopologicalLink_T" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                <p>The retrieved TP</p>
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!-- ================== -->
  <xsd:complexType name="MultipleTlObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a set of TL objects</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="mtop.basic:CommonMessage_T">
        <xsd:sequence>
          <xsd:element name="tlList" type="mtop.fulfillment:TopologicalLinkList_T" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                <p>The list of TLs</p>
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!-- ================ -->
</xsd:schema>
