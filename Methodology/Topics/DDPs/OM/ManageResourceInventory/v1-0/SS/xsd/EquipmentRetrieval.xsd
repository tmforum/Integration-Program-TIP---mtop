<?xml version="1.0" encoding="UTF-8"?>
<!-- mTOP DDP - OM ManageResourceInventory - Copyright TeleManagement Forum 2006 -->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="tmforum.mtop.om-mri.v1" xmlns:tns="tmforum.mtop.om-mri.v1" xmlns:mtop.fulfillment="tmforum.mtop.dm-fulfillment.v1" xmlns:mtop.basic="tmforum.mtop.dm-basic.v1" attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.0">
  <!-- ================ -->
  <xsd:import schemaLocation="../../../../../DM/Basic/v1-0/SS/xsd/AllDefinitions.xsd" namespace="tmforum.mtop.dm-basic.v1"/>
  <xsd:import schemaLocation="../../../../../DM/Fulfillment/v1-0/SS/xsd/AllDefinitions.xsd" namespace="tmforum.mtop.dm-fulfillment.v1"/>
  <!-- ================ -->
  <xsd:element name="getAllEquipmentNames">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllEquipmentNames operation</p>
        <p>This operation has exactly the same behaviour as getAllEquipment(), but instead of returning the entire object structures, this operation returns their names.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllEquipmentNamesResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllEquipmentNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllEquipmentNamesException" type="mtop.basic:GetAllObjectNamesException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllEquipmentNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllEquipment">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllEquipment operation</p>
        <p>This allows an NMS to request all of the equipments and equipment holders that are contained in a managed element or equipment holder.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllEquipmentResponse" type="tns:MultipleEquipmentObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllEquipment operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllEquipmentException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllEquipment operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when managedElementOrEquipmentName does not reference a managed element or an equipment holder
EXCPT_ENTITY_NOT_FOUND - Raised when managedElementOrEquipmentName references object which does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSupportingEquipmentNames">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllSupportingEquipmentNames operation</p>
        <p>This operation has exactly the same behaviour as getAllSupportingEquipments(), but instead of returning the entire object structures, this operation returns their names.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSupportingEquipmentNamesResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllSupportingEquipmentNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSupportingEquipmentNamesException"  type="mtop.basic:GetAllObjectNamesException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllSupportingEquipmentNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSupportingEquipment">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllSupportingEquipment operation</p>
        <p>This service allows an NMS to request all of the equipment which implement a PTP/FTP. For a PTP, the equipments that are returned are those which support the physical layer of the PTP (i.e. have the port on them or are connected by a fibre, wire, etc.). For an FTP, the equipments returned are those which support the physical circuitry implementing the FTP and will include the equipment from which the FTP is named (the FTPs will depend upon the presence of that equipment for their most basic operation). For a particular PTP/FTP the Tx port/function and Rx port/function may be on different cards and in this case both should be returned. Equipment that are used by the PTPs/FTPs, but that do not support them directly (such as a shared DEMUX card) are not reported. When there is equipment protection, this operation reports the primary equipment only. The protecting equipment will not be returned by this operation.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSupportingEquipmentResponse" type="tns:MultipleEquipmentObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllSupportingEquipment operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllSupportingEquipmentException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllSupportingEquipment operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when managedElementOrEquipmentName does not reference a managed element or an equipment holder
EXCPT_ENTITY_NOT_FOUND - Raised when managedElementOrEquipmentName references object which does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getContainedEquipment">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getContainedEquipment operation</p>
        <p>.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getContainedEquipmentResponse" type="tns:MultipleEquipmentObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getContainedEquipment operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getContainedEquipmentException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getContainedEquipment operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when equipmentHolderName does not reference an equipment holder object
EXCPT_ENTITY_NOT_FOUND - Raised when equipmentHolderName references an equipment holder that does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getEquipment">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getEquipment operation</p>
        <p>.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getEquipmentResponse" type="tns:SingleEquipmentObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getEquipment operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getEquipmentException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getEquipment operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference an equipment nor an equipment holder
EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an equipment or equipment holder that does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportedEquipmentNames">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getSupportedEquipmentNames operation</p>
        <p>This operation has exactly the same behaviour as getSupportedEquipments(), but instead of returning the entire object structures, this operation returns their names.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportedEquipmentNamesResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getSupportedEquipmentNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportedEquipmentNamesException"  type="mtop.basic:GetAllObjectNamesException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getSupportedEquipmentNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportedEquipment">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getSupportedEquipment operation</p>
        <p>This operation allows an NMS to request all of the pieces of equipment supported by a given piece of equipment, e.g., a power pack might support many circuit packs.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportedEquipmentResponse" type="tns:MultipleEquipmentObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getSupportedEquipment operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportedEquipmentException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getSupportedEquipment operation</p>
        @TODO: To be Completed
EXCPT_NOT_IMPLEMENTED - Raised if OS cannot support this service
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an equipment object
EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references an equipment object that does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportingEquipmentNames">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getSupportingEquipmentNames operation</p>
        <p>This operation has exactly the same behaviour as getSupportingEquipments(), but instead of returning the entire object structures, this operation returns their names.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportingEquipmentNamesResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getSupportingEquipmentNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportingEquipmentNamesException"  type="mtop.basic:GetAllObjectNamesException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getSupportingEquipmentNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportingEquipment">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getSupportingEquipment operation</p>
        <p>This operation allows an NMS to request all of the equipment which implement a PTP/FTP. For a PTP, the equipments that are returned are those which support the physical layer of the PTP (i.e. have the port on them or are connected by a fibre, wire, etc.). For an FTP, the equipments returned are those which support the physical circuitry implementing the FTP and will include the equipment from which the FTP is named (the FTPs will depend upon the presence of that equipment for their most basic operation). For a particular PTP/FTP the Tx port/function and Rx port/function may be on different cards and in this case both should be returned. Equipment that are used by the PTPs/FTPs, but that do not support them directly (such as a shared DEMUX card) are not reported.</p><p>When there is equipment protection, this operation reports the primary equipment only. The protecting equipment will not be returned by this operation.</p>
        @TODO: To be Completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportingEquipmentResponse" type="tns:MultipleEquipmentObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getSupportingEquipment operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getSupportingEquipmentException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getSupportingEquipment operation</p>
        @TODO: To be Completed
EXCPT_INTERNAL_ERROR - Raised in case of non-specific OS internal failure
EXCPT_INVALID_INPUT - Raised when managedElementOrEquipmentName does not reference a managed element or an equipment holder
EXCPT_ENTITY_NOT_FOUND - Raised when managedElementOrEquipmentName references object which does not exist
EXCPT_COMM_FAILURE - Raised when communication to an entity (needed to help fulfill the request) is lost
EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators has been reached
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
    </xsd:complexType>
  </xsd:element>
  <!-- ================= -->
  <!-- Definitions of Iterator messages for Object and Object Name retrievals  -->
  <!-- ================= -->
  <xsd:element name="getEquipmentIterator" type="mtop.basic:GetAllDataIterator_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getEquipmentIterator operation</p>
        <p>This is the iterator request to return the next batch of Equipments from the OS to which an Equipment retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getEquipmentIteratorResponse" type="tns:MultipleEquipmentObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getEquipmentIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getEquipmentIteratorException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getEquipmentIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <xsd:element name="getEquipmentNamesIterator" type="mtop.basic:GetAllDataIterator_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getEquipmentNamesIterator operation</p>
        <p>This is the iterator request to return the next batch of Equipment names from the OS to which an Equipment names retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getEquipmentNamesIteratorResponse" type="mtop.basic:GetAllObjectNamesResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getEquipmentNamesIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================== -->
  <xsd:element name="getEquipmentNamesIteratorException" type="mtop.basic:GetAllDataIteratorException_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getEquipmentNamesIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <!-- Type Definitions of various Object responses  -->
  <!-- ================= -->
  <xsd:complexType name="SingleEquipmentObjectResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a single Equipment object</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="mtop.basic:CommonMessage_T">
        <xsd:sequence>
          <xsd:element name="eoh" type="mtop.fulfillment:EquipmentOrHolder_T" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                <p>The retrieved Equipment</p>
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!-- ================== -->
  <xsd:complexType name="MultipleEquipmentObjectsResponse_T">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a set of Equipment objects</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="mtop.basic:CommonMessage_T">
        <xsd:sequence>
          <xsd:element name="eohList" type="mtop.fulfillment:EquipmentOrHolderList_T" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                <p>The list of Equipments</p>
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
