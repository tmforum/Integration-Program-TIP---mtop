<?xml version="1.0" encoding="UTF-8"?>
<!-- mTOP DDP - OM ServiceComponentActivationInterface - Copyright TeleManagement Forum 2008 -->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.tmforum.org/mtop/sa/xsd/scai/v1" xmlns:gen="http://www.tmforum.org/mtop/fmw/xsd/gen/v1" xmlns:msg="http://www.tmforum.org/mtop/fmw/xsd/msg/v1" xmlns:scaiexcpt="http://www.tmforum.org/mtop/sa/xsd/saiexcpt/v1" xmlns:nam="http://www.tmforum.org/mtop/fmw/xsd/nam/v1" xmlns:soc="http://www.tmforum.org/mtop/sb/xsd/soc/v1" xmlns:savc="http://www.tmforum.org/mtop/sb/xsd/savc/v1" xmlns:sodel="http://www.tmforum.org/mtop/sb/xsd/sodel/v1" xmlns:csi="http://www.tmforum.org/mtop/sb/xsd/csi/v1" xmlns:svc="http://www.tmforum.org/mtop/sb/xsd/svc/v1" targetNamespace="http://www.tmforum.org/mtop/sa/xsd/scai/v1" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0">
	<xsd:annotation>
		<xsd:documentation>
			<p>DDP: Service Component Activation Interface</p>
			<p>Module:  Message XSD Module</p>
			<p>Description: This module contains the XML Schema type definitions of all the mTOP ServiceComponentActivationInterface SI XML message structures.</p>
		</xsd:documentation>
	</xsd:annotation>
	<!-- ================ -->
	<xsd:import namespace="http://www.tmforum.org/mtop/fmw/xsd/gen/v1" schemaLocation="../../../Framework/IIS/xsd/GeneralDefinitions.xsd"/>
	<xsd:import namespace="http://www.tmforum.org/mtop/sa/xsd/saiexcpt/v1" schemaLocation="SaExceptions.xsd"/>
	<xsd:import namespace="http://www.tmforum.org/mtop/fmw/xsd/msg/v1" schemaLocation="../../../Framework/IIS/xsd/MessageDefinitions.xsd"/>
	<xsd:import namespace="http://www.tmforum.org/mtop/fmw/xsd/nam/v1" schemaLocation="../../../Framework/IIS/xsd/NamingDefinitions.xsd"/>
	<xsd:import namespace="http://www.tmforum.org/mtop/sb/xsd/soc/v1" schemaLocation="../../../ServiceBasic/IIS/xsd/EventServiceObjectCreation.xsd"/>
	<xsd:import namespace="http://www.tmforum.org/mtop/sb/xsd/sodel/v1" schemaLocation="../../../ServiceBasic/IIS/xsd/EventServiceObjectDeletion.xsd"/>
	<xsd:import namespace="http://www.tmforum.org/mtop/sb/xsd/savc/v1" schemaLocation="../../../ServiceBasic/IIS/xsd/EventServiceAttributeValueChange.xsd"/>
	<xsd:import namespace="http://www.tmforum.org/mtop/sb/xsd/csi/v1" schemaLocation="../../../ServiceBasic/IIS/xsd/CommonServiceInfo.xsd"/>
	<xsd:import namespace="http://www.tmforum.org/mtop/sb/xsd/svc/v1" schemaLocation="../../../ServiceBasic/IIS/xsd/Service.xsd"/>
	<!-- =====================  Feasibility Check Response Values========= -->
	<xsd:simpleType name="FeasibilityCheckEnumType">
		<xsd:annotation>
			<xsd:documentation>
				<p>Specifies the possible return values for the feasibility check for an RFS</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="PASSED"/>
			<xsd:enumeration value="FAILED"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- =====================  Modify Service Action Values========= -->
	<xsd:simpleType name="ModifyServiceActionEnumType">
		<xsd:annotation>
			<xsd:documentation>
				<p>Specifies the possible actions that can be taken in a modify service request</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="MODIFY"/>
			<xsd:enumeration value="ADD"/>
			<xsd:enumeration value="DELETE"/>
			<xsd:enumeration value="REPLACE"/>
			<xsd:enumeration value="ACTIVATE"/>
			<xsd:enumeration value="DEACTIVATE"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- =====================  Modify Service Data Values========= -->
	<xsd:complexType name="ModifyServiceDataType">
		<xsd:annotation>
			<xsd:documentation>
				<p/>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="csi:CommonServiceInfoType">
				<xsd:annotation>
					<xsd:documentation>
						<p>This element provides the service attributes that are modifiable.</p>
					</xsd:documentation>
				</xsd:annotation>
				<xsd:sequence>
					<xsd:element name="adminState" type="svc:AdminStateType" minOccurs="0"/>
					<xsd:element name="serviceState" type="svc:ServiceStateType" minOccurs="0"/>
					<xsd:element name="serviceTemplateRef" type="nam:NamingAttributeType" minOccurs="0"/>
					<xsd:element name="subscriberRef" type="nam:NamingAttributeType" minOccurs="0"/>
					<xsd:element name="userRefList" type="nam:NamingAttributeListType" minOccurs="0"/>
					<xsd:element name="sapList" type="svc:ServiceAccessPointType" maxOccurs="unbounded"/>
					<xsd:element name="describedByList" type="svc:ServiceCharacteristicValueType" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- =====================  Feasibility Check Message ========= -->
	<xsd:element name="feasibilityCheckRequest">
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation>
					<p>This operation performs a feasibility check to determine whether an RFS could be created based upon information passed</p>
					<p>When this request is complete, a response to the action if returned  </p>
					<p>Preconditions: The RFS  does not exist</p>
					<p>Post-condition(s):</p>
					<p>PASSED or FAILED is returned</p>
					<p> The  RFS is NOT created</p>
					<p>In case of failure:</p>
					<p>An exception is thrown. </p>
				</xsd:documentation>
			</xsd:annotation>
			<xsd:sequence>
				<xsd:element name="rfsCheckData" type="svc:ResourceFacingServiceType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Feasibility Check Response Message ========= -->
	<xsd:element name="feasibilityCheckResponse" type="tns:FeasibilityCheckEnumType">
		<xsd:annotation>
			<xsd:documentation>
				<p>The response to a feasbility check is "passed" or "failed" </p>
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- ===================== Feasibility Check Exceptions ========= -->
	<xsd:element name="feasibilityCheckException">
		<xsd:annotation>
			<xsd:documentation>
				<p>Exception message structure of the feasibility check operation</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:element name="basicFailureEvent" type="scaiexcpt:BasicFailureEventType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- === Provision === -->
	<!-- ===================== Reserve Request Message ========= -->
	<xsd:element name="reserveRequest">
		<xsd:annotation>
			<xsd:documentation>
				<p>This operation allocates and reserves the necessary resources to support a given RFS for a given subscriber until  â€œexpiring timeâ€� is met </p>
				<p>If the requesting OS does not provision and activate the RFS before the expiration time is met, the target OS will delete the RFS and </p>
				<p> free all the associated resources. If the target OS does not support the specification of an expiring time, it may set an internal timer </p>
				<p> to ensure that un-provisioned RFS are cleaned up on a regular basis. </p>
				<p>Preconditions: The RFS does not exist </p>
				<p>In case of success, choice of one of the following:</p>
				<p> The  RFS is created and placed in a reserved state. The name of the RFS, if created, is returned</p>
				<p> Object Creation Notification: an indication that the service component activation OS created an RFS </p>
				<p> The resources supporting the RFS are reserved only, not provisioned</p>
				<p>In case of failure:</p>
				<p>An exception is thrown. </p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:annotation>
					<xsd:documentation>
						<p>The RFS data structure contains necessary information to actually reserve resources associated to instantiation of RFS </p>
						<xsd:element name="rfsCreateData" type="svc:ResourceFacingServiceType"/>
						<xsd:element name="expiringTime" type="xsd:dateTime"/>
					</xsd:documentation>
				</xsd:annotation>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Reserve Response Message ========= -->
	<xsd:element name="reserveResponse">
		<xsd:annotation>
			<xsd:documentation>
				<p>This type covers the various responses to the reserve RFS request.</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element name="rfsName" type="nam:NamingAttributeType"/>
				<xsd:element name="rfsCreation" type="soc:ServiceObjectCreationType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Reserve  Exceptions ========= -->
	<xsd:element name="reserveException">
		<xsd:annotation>
			<xsd:documentation>
				<p>Exception message structure of the reserve RFS operation</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:element name="basicFailureEvent" type="scaiexcpt:BasicFailureEventType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Provision Request Message ========= -->
	<xsd:element name="provisionRequest">
		<xsd:annotation>
			<xsd:documentation>
				<p> This operation provisions an  RFS in support of a CFS.  </p>
				<p> Input to the operation is either create data for the RFS, or the name of an RFS which was previously reserved.</p>
				<p> When this request is complete, the RFS shall be in the Provisioned_Inactive state  </p>
				<p>In case of success, choice of one of the following:</p>
				<p> The  RFS is provisioned and placed in a provisioned_inactive state. The name of the RFS, if created, is returned</p>
				<p> Object Creation Notification: an indication that the service component activation OS instantiated an RFS </p>
				<p> State Change Notification: an indication that the RFS changed from a "reserved" state to a "provisioned_inactive" state</p>
				<p> Object Deletion Notification:   an RFS that was previously "reserved" and could not be provisioned; thus it was deleted</p>
				<p>In case of failure:</p>
				<p>An exception is thrown. </p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation>
					<p>The RFS data structure contains necessary information to actually reserve resources associated to instantiation of RFS </p>
				</xsd:documentation>
			</xsd:annotation>
			<xsd:choice>
				<xsd:element name="rfsCreateData" type="svc:ResourceFacingServiceType"/>
				<xsd:element name="rfsName" type="nam:NamingAttributeType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Provision Response Messages ========= -->
	<xsd:element name="provisionResponse">
		<xsd:annotation>
			<xsd:documentation>
				<p>This type covers the various responses to the provision RFS request.</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element name="rfsName" type="nam:NamingAttributeType"/>
				<xsd:element name="rfsCreation" type="soc:ServiceObjectCreationType"/>
				<xsd:element name="rfsStateChange" type="savc:ServiceAttributeValueChangeType"/>
				<xsd:element name="rfsDeletion" type="sodel:ServiceObjectDeletionType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Provision Exceptions ========= -->
	<xsd:element name="provisionException">
		<xsd:annotation>
			<xsd:documentation>
				<p>Exception message structure of the provision service operation</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:element name="basicFailureEvent" type="scaiexcpt:BasicFailureEventType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- === Activate === -->
	<!-- ===================== Active Request Message ========= -->
	<xsd:element name="activateRequest">
		<xsd:annotation>
			<xsd:documentation>
				<p> This operation activates an RFS in support of a CFS.  </p>
				<p> Input to the operation is either create data for the RFS to be provisioned and activated   </p>
				<p>  or the name of an RFS which was previously provisioned.</p>
				<p>In case of success, choice of one of the following:</p>
				<p> The  RFS is provisioned (if required) and placed in a provisioned_active state. The name of the RFS  is returned</p>
				<p> Object Creation Notification: an indication that the service component activation OS instantiated  an RFS </p>
				<p> State Change Notification: an indication that the RFS changed from "provisioned_inactive" state to  "provisioned_active"state  </p>
				<p>In case of failure:</p>
				<p>An exception is thrown. </p>
				<p>If RFS existed, but could not be activated, it remains in a "provisioned_inactive" state </p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation>
					<p>The RFS data structure contains necessary information to actually reserve resources associated to instantiation of RFS </p>
				</xsd:documentation>
			</xsd:annotation>
			<xsd:choice>
				<xsd:element name="rfsCreateData" type="svc:ResourceFacingServiceType"/>
				<xsd:element name="rfsName" type="nam:NamingAttributeType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Activate Response Messages ========= -->
	<xsd:element name="activateResponse">
		<xsd:annotation>
			<xsd:documentation>
				<p>This type covers the various responses to the activate RFS request.</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element name="rfsName" type="nam:NamingAttributeType"/>
				<xsd:element name="rfsCreation" type="soc:ServiceObjectCreationType"/>
				<xsd:element name="rfsStateChange" type="savc:ServiceAttributeValueChangeType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Activate Exceptions ========= -->
	<xsd:element name="activateException">
		<xsd:annotation>
			<xsd:documentation>
				<p>Exception message structure of the activate service operation</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:element name="basicFailureEvent" type="scaiexcpt:BasicFailureEventType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- === Deactivate === -->
	<!-- ===================== Deactivate Request Message ========= -->
	<xsd:element name="deactivateRequest">
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation>
					<p> This operation deactivates an RFS. It is recommended the RFS be in a provisioned_active state to be deactived </p>
					<p> Input to the operation is the name of the RFS to be deactivated</p>
					<p>In case of success, choice of one of the following:</p>
					<p> The  RFS is deactivated and placed in a provisioned_inactive state. The name of the RFS  is returned</p>
					<p> State Change Notification: indicates that the RFS changed from "provisioned_active" state to  "provisioned_inactive"state  </p>
					<p>In case of failure:</p>
					<p>An exception is thrown. </p>
					<p>If RFS can not be deactivated,  it remains in a "provisioned_active" state </p>
				</xsd:documentation>
			</xsd:annotation>
			<xsd:sequence>
				<xsd:element name="rfsName" type="nam:NamingAttributeType"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Deactivate Response Messages ========= -->
	<xsd:element name="deactivateResponse">
		<xsd:annotation>
			<xsd:documentation>
				<p>This type covers the various responses to the deactivate RFS request.</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element name="rfsName" type="nam:NamingAttributeType"/>
				<xsd:element name="rfsStateChange" type="savc:ServiceAttributeValueChangeType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Deactivate Exceptions ========= -->
	<xsd:element name="deactivateException">
		<xsd:annotation>
			<xsd:documentation>
				<p>Exception message structure of the deactive operation</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:element name="basicFailureEvent" type="scaiexcpt:BasicFailureEventType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- === Terminate === -->
	<!-- ===================== Terminate Request Message ========= -->
	<xsd:element name="terminateRequest">
		<xsd:annotation>
			<xsd:documentation>
				<p> This operation terminates an RFS. The RFS should be in a provisioned_inactive state to be terminated </p>
				<p> Input to the operation is the name of the RFS to be terminated</p>
				<p>In case of success, choice of one of the following:</p>
				<p> The  RFS is terminated. The name of the RFS terminated  is returned</p>
				<p> Object Deletion Notificationâ€“ this event indicates that the RFS has been deleted </p>
				<p>In case of failure:</p>
				<p>An exception is thrown. </p>
				<p>If RFS can not be terminated,  it remains in the state it was in prior to the termination request </p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="rfsName" type="nam:NamingAttributeType">
					<xsd:annotation>
						<xsd:documentation>
							<p>The name of the RFS being terminated</p>
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Terminate Response Messages ========= -->
	<xsd:element name="terminateResponse">
		<xsd:annotation>
			<xsd:documentation>
				<p>This type covers the various responses to the terminate RFS request.</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element name="rfsName" type="nam:NamingAttributeType"/>
				<xsd:element name="rfsDeletion" type="sodel:ServiceObjectDeletionType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Terminate Exceptions ========= -->
	<xsd:element name="terminateException">
		<xsd:annotation>
			<xsd:documentation>
				<p>Exception message structure of the terminate operation</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:element name="basicFailureEvent" type="scaiexcpt:BasicFailureEventType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Modify Request Message ========= -->
	<xsd:element name="modifyRequest">
		<xsd:annotation>
			<xsd:documentation>
				<p> This operation modifies an RFS. The RFS should be in a provisioned_inactive state to be modified </p>
				<p> Input to the operation is the Modify Service Data, the action, and the target service state</p>
				<p> The following modify actions are available: modify, add, delete, replace, activate, deactivate</p>
				<p> Case: modify -> Modification of general RFS service attributes or characteristics</p>
				<p> Case: add ->  Addition of users and/or SAPs to RFS</p>
				<p> Case: delete -> Delete users and/or SAPs from RFS</p>
				<p> Case: replace -> Replace users/and or SAPs from RFS</p>
				<p> Case: activate -> Activate a subscriber/user on a given SAP</p>
				<p> Case: deactivate -> Deactivate a subscriber/user on a given SAP</p>
				<p> The target service state indicates to what state the RFS should be transitioned if the modify request is successful</p>
				<p>In case of successful service modification, choice of one of the following:</p>
				<p> The name of the RFS that was modified is returned, and its new service state</p>
				<p> Attribute Value Change:  an indication that the RFS has been modified </p>
				<p>In case of failure:</p>
				<p>An exception is thrown. </p>
				<p>If RFS can not be modified,  it remains in its previous state </p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="rfsModifyData" type="tns:ModifyServiceDataType">
					<xsd:annotation>
						<xsd:documentation>
							<p>The modify service data structure contains data to be modified</p>
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="action" type="tns:ModifyServiceActionEnumType">
					<xsd:annotation>
						<xsd:documentation>
							<p>The action enum specifies the action to be performed as part of the modification request</p>
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="targetState" type="svc:ServiceStateType">
					<xsd:annotation>
						<xsd:documentation>
							<p>The target state enum specifies desired target state after the modification request. </p>
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Modify Response Messages ========= -->
	<xsd:element name="modifyResponse">
		<xsd:annotation>
			<xsd:documentation>
				<p>This type covers the various responses to the modify RFS request.</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:sequence>
					<xsd:element name="rfsName" type="nam:NamingAttributeType"/>
					<xsd:element name="serviceState" type="svc:ServiceStateType"/>
				</xsd:sequence>
				<xsd:element name="rfsModification" type="savc:ServiceAttributeValueChangeType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<!-- ===================== Modify Exceptions ========= -->
	<xsd:element name="modifyException">
		<xsd:annotation>
			<xsd:documentation>
				<p>Exception message structure of the modify operation</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:element name="basicFailureEvent" type="scaiexcpt:BasicFailureEventType"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
