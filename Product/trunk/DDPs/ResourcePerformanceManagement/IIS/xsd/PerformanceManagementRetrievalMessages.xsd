<?xml version="1.0" encoding="UTF-8"?>
<!-- mTOP DDP - OM ResourcePerformanceManagement - Copyright TeleManagement Forum 2007 -->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.tmforum.org/mtop/rpm/xsd/pmr/v1" xmlns:tns="http://www.tmforum.org/mtop/rpm/xsd/pmr/v1" xmlns:msg="http://www.tmforum.org/mtop/fmw/xsd/msg/v1" xmlns:nam="http://www.tmforum.org/mtop/fmw/xsd/nam/v1" xmlns:pmtgt="http://www.tmforum.org/mtop/nra/xsd/pmtgt/v1" xmlns:pmdata="http://www.tmforum.org/mtop/nra/xsd/pmdata/v1" xmlns:pm="http://www.tmforum.org/mtop/nra/xsd/pm/v1" xmlns:pmp="http://www.tmforum.org/mtop/nra/xsd/pmp/v1" xmlns:lay="http://www.tmforum.org/mtop/nrb/xsd/lay/v1" xmlns:pmpar="http://www.tmforum.org/mtop/nra/xsd/pmpar/v1" attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.0">
  <xsd:annotation>
    <xsd:documentation>
      <p>DDP: ResourcePerformanceManagement</p>
      <p>Module:  Message XSD Module</p>
      <p>Description: This module contains the XML Schema type definitions of all the mTOP PerformanceManagementRetrieval SI XML message structures.</p>
    </xsd:documentation>
  </xsd:annotation>
  <!-- ================ -->
  <xsd:import schemaLocation="../../../Framework/IIS/xsd/MessageDefinitions.xsd" namespace="http://www.tmforum.org/mtop/fmw/xsd/msg/v1"/>
  <xsd:import schemaLocation="../../../Framework/IIS/xsd/NamingDefinitions.xsd" namespace="http://www.tmforum.org/mtop/fmw/xsd/nam/v1"/>
  <xsd:import schemaLocation="../../../NetworkResourceAssurance/IIS/xsd/PmObjectSelect.xsd" namespace="http://www.tmforum.org/mtop/nra/xsd/pmtgt/v1"/>
  <xsd:import schemaLocation="../../../NetworkResourceAssurance/IIS/xsd/PmData.xsd" namespace="http://www.tmforum.org/mtop/nra/xsd/pmdata/v1"/>
  <xsd:import schemaLocation="../../../NetworkResourceAssurance/IIS/xsd/PmDefinitions.xsd" namespace="http://www.tmforum.org/mtop/nra/xsd/pm/v1"/>
  <xsd:import schemaLocation="../../../NetworkResourceAssurance/IIS/xsd/Pmp.xsd" namespace="http://www.tmforum.org/mtop/nra/xsd/pmp/v1"/>
  <xsd:import schemaLocation="../../../NetworkResourceBasic/IIS/xsd/LayerRates.xsd" namespace="http://www.tmforum.org/mtop/nrb/xsd/lay/v1"/>
  <xsd:import schemaLocation="../../../NetworkResourceAssurance/IIS/xsd/PmParameter.xsd" namespace="http://www.tmforum.org/mtop/nra/xsd/pmpar/v1"/>
  <!-- ================ -->
  <xsd:element name="getAllCurrentPmDataRequest">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllCurrentPmData operation</p>
        <p>This allows an NMS to request a filtered set (scoped by the input parameter pmParameters) of the current PM data for a list of TP measurement points. Within the request for each measurement point, granularity (15min, 24h, NA, etc.) and location (nearEnd and/or farEnd and/or bidirectional) may be specified.</p>
        <p>The operation mode is best effort. Current data will generally be marked as incomplete, as the current bin is not completed. If no PM data are available as specified, an empty list is returned.</p>
        <p>Depending on the MEP used, this operation instructs the Performance Management OSS to either return all current PM data in one or more getAllCurrentPmData responses (using an iterator), or to the store current PM data into a file, and to send that file by FTP (File Transfer Protocol) to the location specified in the appropriate request header attribute.</p>
        <p>Performance Monitoring Data transfer normally involves huge amounts of data. The capability to send PM data to a controlled destination other than the NMS allows for flexibility in the choice of the PM data file format, the particular file transfer protocol (including the possibility to apply data compression techniques) and the destination machine so as to make optimal use of the available data network capacity. The file transfer protocol to transfer PM data is the FTP protocol.</p>
        <p>This operation is asynchrounous and is not required to wait until the PM data is extracted or until the FTP transfer is over before it returns. Notifications can be generated to inform the NMS of the progress of the transfer. See SD1-26 Notification Service and Telecoms Log Service Usage for details.</p>
        <p>Performance monitoring data on multiple TPs of multiple MEs is transferred in one data file. This PM data file has the following format: SD1-30 PM File Format Definition.</p>
        <p>NOTE: The required FTP location of the PM data file must be specified in the MTOSI Header in the attribute: LocationURI</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="pmObjectSelectList" type="pmtgt:PmObjectSelectListType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>This attribute contains a list of measurement points for which to get the PM data.</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element name="pmParameters" type="pm:PmParameterNameListType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>This attribute specifies which PM parameters within the scope of the pmTPSelectList shall be returned. An empty list means to return all supported parameters. The returned parameters are best effort, i.e. among the parameters specified only the subset of supported parameters will be returned.</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="getAllCurrentPmDataResponse" type="tns:MultiplePmDataObjectsResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllCurrentPmData operation. In the case where the request indicated that the data is to be returned via FTP, no list will be present in this reponse.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getAllCurrentPmDataException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllCurrentPmData operation</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="msg:AllExceptionsType">
          <xsd:choice>
            <xsd:element ref="msg:communicationFailure"/>
            <xsd:element ref="msg:internalError"/>
            <xsd:element ref="msg:invalidInput"/>
            <xsd:element ref="msg:notImplemented"/>
            <xsd:element ref="msg:tooManyOpenIterators"/>
            <xsd:element ref="msg:unsupportedCompressionFormat"/>
            <xsd:element ref="msg:unsupportedPackingFormat"/>
          </xsd:choice>
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllPmpNamesRequest">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getAllPmpNames operation</p>
        <p>This operation has exactly the same behaviour as getAllPmpsRequest, but instead of returning the entire object structures, this operation returns their names.</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="tpName" type="nam:NamingAttributeType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>The name of the object to which this selection applies. This may be:</p>
              <p>
                <br>ManagedElement: The selection applies to all termination points contained within the ManagedElement.</br>
                <br>TerminationPoint: The selection applies only to the named termination point which will be a PTP, an FTP or a CTP. Unlike the case for ManagedElement, the operation will not apply to any "contained" TPs when a PTP, an FTP or CTP is specified.</br>
              </p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="getAllPmpNamesResponse" type="tns:MultiplePmpObjectNamesResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllPmpNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getAllPmpNamesException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllPmpNames operation</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="msg:AllExceptionsType">
          <xsd:choice>
            <xsd:element ref="msg:communicationFailure"/>
            <xsd:element ref="msg:internalError"/>
            <xsd:element ref="msg:invalidInput"/>
            <xsd:element ref="msg:notImplemented"/>
            <xsd:element ref="msg:tooManyOpenIterators"/>
          </xsd:choice>
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getAllPmpsRequest">
    <xsd:annotation>
      <xsd:documentation>
        <p>This operation allows an OSS to retrieve all PMPs contained in a specified TP or ME.</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="tpOrMeName" type="nam:NamingAttributeType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>The name of the object to which this selection applies. This may be:</p>
              <p>
                <br>ManagedElement: The selection applies to all termination points contained within the ManagedElement.</br>
                <br>TerminationPoint: The selection applies only to the named termination point which will be a PTP, an FTP or a CTP. Unlike the case for ManagedElement, the operation will not apply to any "contained" TPs when a PTP, an FTP or CTP is specified.</br>
              </p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="getAllPmpsResponse" type="tns:MultiplePmpObjectsResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getAllPmps operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getAllPmpsException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getAllPmps operation</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="msg:AllExceptionsType">
          <xsd:choice>
            <xsd:element ref="msg:communicationFailure"/>
            <xsd:element ref="msg:internalError"/>
            <xsd:element ref="msg:invalidInput"/>
            <xsd:element ref="msg:notImplemented"/>
            <xsd:element ref="msg:tooManyOpenIterators"/>
          </xsd:choice>
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getHistoryPmDataRequest">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getHistoryPmData operation</p>
        <p>This operation returns the PM history data on a specified list of TPs.</p>
        <p>Depending on the MEP used, this operation instructs the Performance Management OSS to either return history PM data in one or more getHistoryPmData responses (using an iterator), or to the store history PM data into a file, and to send that file by FTP (File Transfer Protocol) to the location specified in the appropriate request header attribute.</p>
        <p>Within the request a list of TP/layerRate measurement points and a time frame are specified. For each measurement point, the granularity (15min, 24h, NA, etc) and location (nearEnd and/or farEnd and/or bidirectional) may be specified. A filtered set (scoped by the input parameter pmParameters) of PM parameters collected for a particular TP/layerRate measurement point for the granularity, location and time window specified is made available.</p>
        <p>Measurement intervals and the given time frame are considered as half open intervals to the right, i.e. startTime &lt;= t &lt; endTime.</p>
        <p>A particular historic measurement interval (of duration 15 min resp. 24 h) is defined to be covered by the specified time frame if there is a non empty intersection between the measurement interval and the given time frame, i.e. endTime[PM record] &gt; startTime[request parameter] AND startTime[PM record] &lt; endTime[request parameter] PM data are returned for all covered measurement intervals.</p>
        <p>For records partly included in the time frame specified, PM data will be returned. In case a history bin has incomplete PM measurement data (for instance because PM data collection was disabled for some time period(s) within the bin's time span), the particular measurement period will be marked as incomplete.</p>
        <p>If the forceUpload parameter is true, the OSS is to upload the data for all the specified collection periods (provided they do exist in the MEs) and provide the entire PM data requested. If the forceUpload parameter is false, measurement intervals within the specified time frame for which PM data has been collected in the ME but not yet uploaded to the EMS will be included in the PM file with status "Unavailable", however without valid PM data.</p>
        <p>Performance Monitoring Data transfer normally involves huge amounts of data. The capability to send PM data to a controlled destination other than the NMS allows for flexibility in the choice of the PM data file format, the particular file transfer protocol (including the possibility to apply data compression techniques) and the destination machine so as to make optimal use of the available data network capacity. The file transfer protocol to transfer PM data is the FTP protocol.</p>
        <p>This operation is asynchrounous and is not required to wait until the PM data is extracted or until the FTP transfer is over before it returns. Notifications can be generated to inform the NMS of the progress of the transfer. See SD1-26 Notification Service and Telecoms Log Service Usage for details.</p>
        <p>Performance monitoring data on multiple TPs of multiple MEs is transferred in one data file. This PM data file has the following format: SD1-30 PM File Format Definition.</p>
        <p>NOTE: The required FTP location of the PM data file must be specified in the MTOSI Header in the attribute: LocationURI</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="pmObjectSelectList" type="pmtgt:PmObjectSelectListType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>This parameter specifies which history PM data to return. If pmTPSelectList is empty, PM data for all monitored TPs of all MEs managed by the EMS (all layer rates, all granularities) are stored in the file.</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element name="pmParameters" type="pm:PmParameterNameListType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>This parameter specifies which PM parameters within the scope of the pmTPSelectList shall be contained in the file. An empty list means to store all supported parameters. The returned parameters are best effort, i.e. among the parameters specified only the subset of supported parameters will be stored.</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element name="startTime" type="xsd:dateTime" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>Specifies the start of the time window for collection (included).</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element name="endTime" type="xsd:dateTime" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>Specifies the end of the time window for collection (excluded).</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element name="forceUpload" type="xsd:boolean" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>Specifies if the Performance Management OSS must upload all available PM data requested from the MEs.</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getHistoryPmDataResponse" type="tns:MultiplePmDataObjectsResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getHistoryPmData operation. In the case where the request indicated that the data is to be returned via FTP, no list will be present in this reponse.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getHistoryPmDataException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getHistoryPmData operation</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="msg:AllExceptionsType">
          <xsd:choice>
            <xsd:element ref="msg:communicationFailure"/>
            <xsd:element ref="msg:entityNotFound"/>
            <xsd:element ref="msg:internalError"/>
            <xsd:element ref="msg:invalidInput"/>
            <xsd:element ref="msg:notImplemented"/>
            <xsd:element ref="msg:tooManyOpenIterators"/>
            <xsd:element ref="msg:unableToComply"/>
            <xsd:element ref="msg:unsupportedCompressionFormat"/>
            <xsd:element ref="msg:unsupportedPackingFormat"/>
          </xsd:choice>
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getHoldingTimeRequest">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getHoldingTime operation</p>
        <p>The EMS is requested to inform the NMS about how many hours PM data records (24h/15min) are held in the EMS. This is the minimum time. If EMS does not store PM data it is the time supported in the NE (minimum time of all managed NEs).</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getHoldingTimeResponse">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getHoldingTime operation</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="holdingTime" type="pm:HoldingTimeType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>Contains the time period in hours within which 24h PM data records and 15min PM data records may be retrieved.</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="getHoldingTimeException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getHoldingTime operation</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="msg:AllExceptionsType">
          <xsd:choice>
            <xsd:element ref="msg:communicationFailure"/>
            <xsd:element ref="msg:internalError"/>
            <xsd:element ref="msg:notImplemented"/>
          </xsd:choice>
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getMePmCapabilitiesRequest">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getMePmCapabilities operation</p>
        <p>This operation allows the NMS to request, from the performance management OSS, the set of PM parameters supported by a particular ME at a specific layer.</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="meName" type="nam:NamingAttributeType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>Contains the name of the managed element</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element name="layer" type="lay:LayerRateType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>The specified layer for which to gather PM parameters.</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="getMePmCapabilitiesResponse">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getMePmCapabilities operation</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="pmParameterList" type="pmpar:PmParameterListType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>Contains the set of PM parameters that are supported by the ME referred to.</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="getMePmCapabilitiesException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getMePmCapabilities operation</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="msg:AllExceptionsType">
          <xsd:choice>
            <xsd:element ref="msg:communicationFailure"/>
            <xsd:element ref="msg:entityNotFound"/>
            <xsd:element ref="msg:internalError"/>
            <xsd:element ref="msg:invalidInput"/>
            <xsd:element ref="msg:notImplemented"/>
          </xsd:choice>
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ================ -->
  <xsd:element name="getProfileAssociatedTpsRequest">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getProfileAssociatedTps operation</p>
        <p>This operation gets the set of TPs that are associated with a TCA parameter profile.</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="profileName" type="nam:NamingAttributeType" minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              <p>Contains the name gives the name of the TCA parameter profile.</p>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="getProfileAssociatedTpsResponse" type="tns:MultipleProfileAssociatedTpObjectNamesResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getProfileAssociatedTps operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getProfileAssociatedTpsException">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getProfileAssociatedTps operation</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="msg:AllExceptionsType">
          <xsd:choice>
            <xsd:element ref="msg:communicationFailure"/>
            <xsd:element ref="msg:entityNotFound"/>
            <xsd:element ref="msg:internalError"/>
            <xsd:element ref="msg:invalidInput"/>
            <xsd:element ref="msg:notImplemented"/>
            <xsd:element ref="msg:tooManyOpenIterators"/>
          </xsd:choice>
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ================= -->
  <!-- Definitions of Iterator messages for Object and Object Name retrievals  -->
  <!-- ================= -->
  <xsd:element name="getPmDataIteratorRequest" type="msg:GetAllDataIteratorRequestType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getPmDataIterator operation</p>
        <p>This is the iterator request to return the next batch of PM data from the OS to which an PM data retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getPmDataIteratorResponse" type="tns:MultiplePmDataObjectsResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getPmDataIteratorRequest operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getPmDataIteratorException" type="msg:GetAllDataIteratorExceptionType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getManagedElementsIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <xsd:element name="getPmpsIteratorRequest" type="msg:GetAllDataIteratorRequestType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getPmpsIterator operation</p>
        <p>This is the iterator request to return the next batch of PMP objects from the OS to which a PMP retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getPmpsIteratorResponse" type="tns:MultiplePmpObjectsResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getPmpsIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getPmpsIteratorException" type="msg:GetAllDataIteratorExceptionType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getPmpsIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <xsd:element name="getPmpNamesIteratorRequest" type="msg:GetAllDataIteratorRequestType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Request message structure of the getPmpElementNamesIterator operation</p>
        <p>This is the iterator request to return the next batch of PMP names from the OS to which a PMP names retrieval request was initially sent.</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getPmpNamesIteratorResponse" type="tns:MultiplePmpObjectNamesResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure of the getPmpNamesIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="getPmpNamesIteratorException" type="msg:GetAllDataIteratorExceptionType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Exception message structure of the getPmpNamesIterator operation</p>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!-- ================= -->
  <!-- Local Data Type Definitions of various messages  -->
  <!-- ================== -->
  <xsd:complexType name="MultiplePmDataObjectsResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a set of PmData objects</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="pmDataList" type="pmdata:PmDataListType" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            <p>List of pmData objects</p>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!-- ================== -->
  <xsd:complexType name="MultiplePmpObjectNamesResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a set of Pmp object names</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="nameList" type="nam:NamingAttributeListType" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            <p>The list of Pmp names</p>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!-- ================== -->
  <xsd:complexType name="MultiplePmpObjectsResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response message structure for a set of Pmp objects</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="pmpList" type="pmp:PerformanceMonitoringPointListType" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            <p>The list of Pmp objects</p>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!-- ================== -->
  <!-- TODO Check should this be imported from TerminationPointRetrieval? -->
  <xsd:complexType name="MultipleProfileAssociatedTpObjectNamesResponseType">
    <xsd:annotation>
      <xsd:documentation>
        <p>Response to GetProfileAssociatedTPsRequestType.</p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="nameList" type="nam:NamingAttributeListType" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            <p>Provides the set of TPs associated with the profile provided.</p>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!-- ================== -->
</xsd:schema>
