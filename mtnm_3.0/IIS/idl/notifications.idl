#ifndef notifications_idl
#define notifications_idl

// ********************************
// *                              *
// * notifications.idl            *
// *                              *
// ********************************

//Include list
#include "globaldefs.idl"
#include "OMGidl/CosNotification.idl"
#include "performance.idl"
#include "transmissionParameters.idl"


#pragma prefix "mtnm.tmforum.org"

  /** 
   * <a href=supportingDocumentation/overview_NML-EML_Interface.pdf>Overview of 
   * NML-EML interface</a>
   *
   * <p>This module contains the definition of the notification portions
   * of the NML-EML interface. See
   * <a href=supportingDocumentation/OMGServicesUsage.pdf>
   * Guidelines for Using the OMG Notification and Telecom Log Service</a>
   * for details on how this interface uses the notification service.</p>
   *
   * <h5> Version 3.0. </h5>
   **/


module notifications
{
  /**
   * <p>"OobjectType" is a filterable field attribute of all notifications,
   * except NT_PROTECTION_SWITCH, NT_EPROTECTION_SWITCH,
   * NT_FILE_TRANSFER_STATUS, NT_PM_SC, and NT_BACKUP_STATUS.
   * The enum avoids any uncertainty in the type of object and allows
   * and allows simple filtering.</p>
   *
   * <p>A notification must be reported against the correct object
   * if it this object is modelled.</p> 
   *
   * <p>For alarms, the objectType OT_AID (Alarm Identifier) is used
   * to represent the EMS object types that are not modelled
   * but can emit alarms.  Other notifications types
   * should not be reported against AIDs. This objectType value is also used for
   * new object types from release 3.0 onwards in order to guarantee
   * backward compatibility of the interface.</p>
   *
   * <p>Due to the requirement of strict backward compatibility
   * the release 2 enum ObjectType_T cannot be extended to include
   * new object types.  Therefore OT_AID is used as an "escape value"
   * for the field "objectType".  Thus OT_AID may also represent
   * new object types.  To identify which object type applies,
   * the new filterable field "objectTypeQualifier" is introduced
   * which is of type string and whose values are as follows:</p>
   * <br>"" - indicates an AID<br>
   * <br>"OT_EPROTECTION_GROUP" - equipment protection group<br>
   * <br>"OT_TCA_PARAMETER_PROFILE" - TCA parameter profile<br>
   * <br>"OT_PMP" - performance monitoring point<br>
   * <br>"OT_GTP" - group TP<br>
   * <br>"OT_ASAP" - alarm severity assignment profile<br>
   * <br>"OT_TRANSMISSION_DESCRIPTOR" - transmission descriptor<br>
   * <p>If "objectTypeQualifier" is not present but "objectType"
   * has the value OT_AID we are dealing with a proper AID.</p>
   **/
   enum  ObjectType_T
   {
     OT_EMS,
     OT_MANAGED_ELEMENT,
     OT_MULTILAYER_SUBNETWORK,
     OT_TOPOLOGICAL_LINK,
     OT_SUBNETWORK_CONNECTION,
     OT_PHYSICAL_TERMINATION_POINT,
     OT_CONNECTION_TERMINATION_POINT,
     OT_TERMINATION_POINT_POOL,
     OT_EQUIPMENT_HOLDER,
     OT_EQUIPMENT,
     OT_PROTECTION_GROUP,
     OT_TRAFFIC_DESCRIPTOR,
     OT_AID
   };

  /**
   * <p>The ObjectTypeQualifier_T is used to identify object types defined
   * in v3.0 and beyond. It is needed because the ObjectType_T enum cannot be 
   * extended for backward compatibility reasons. </p>
   * 
   **/
   typedef string ObjectTypeQualifier_T;


  /**
   * <p>The PerceivedSeverity_T values are consistent
   * with ITU-T X.733 definitions.</p>
   * 
   **/
   enum  PerceivedSeverity_T
   {
     PS_INDETERMINATE,
     PS_CRITICAL,
     PS_MAJOR,
     PS_MINOR,
     PS_WARNING,
     PS_CLEARED
   };

  /**
   * <p>AcknowledgeIndication_T describes the event acknowledge state.</p> 
   * <br>AI_EVENT_ACKNOWLEDGED - provided in case of manual or auto 
   * acknowledgement<br>
   * <br>AI_EVENT_UNACKNOWLEDGED - provided if the event has not been 
   * acknowledged but the EMS supports acknowledgement for this event
   * or in the case that the alarm has been previously acknowledged and
   * then unacknowledged<br>
   * <br>AI_NA provided in case the EMS does not support acknowledgement for 
   * this event or does not support acknowledgement at all<br>
   **/
   enum AcknowledgeIndication_T 
   {
     AI_EVENT_ACKNOWLEDGED,
     AI_EVENT_UNACKNOWLEDGED,
     AI_NA 
   };

  /**
   * <p>Used to distinguish TCA from alarm.</p> 
   **/
   enum AlarmTypeQualifier_T 
   {
     ALARM, 
     TCA
   }; 

  /**
   * <p>List of PerceivedSeverity_T values.</p>
   * 
   **/
   typedef sequence<PerceivedSeverity_T> PerceivedSeverityList_T;


  /**
   * <p>ServiceAffecting_T describes the impact of a fault on monitored 
   * entities</p>
   * <br>SA_UNKNOWN: The EMS cannot determine if the condition 
   *  affects service or not.<br>
   * <br>SA_SERVICE_AFFECTING: The EMS determines that the condition affects 
   * service.<br>
   * <br>SA_NON_SERVICE_AFFECTING: The EMS determines that the condition does 
   *  not affect service.<br>
   **/
   enum ServiceAffecting_T
   {
    SA_UNKNOWN,
    SA_SERVICE_AFFECTING,
    SA_NON_SERVICE_AFFECTING
   };
 

  /**
   * <p>Set of probable causes.  
   * See <a href=supportingDocumentation/ProbableCauses.pdf>Specification
   * of probableCause strings</a> for a description of the probable cause 
   * strings available with this release of the interface.</p>
   **/
   typedef sequence<string> ProbableCauseList_T;


  /**
   * <p>The NameAndAnyValue_T structure is provided when an any value is 
   * needed.</p>
   **/
   struct NameAndAnyValue_T
   {
     string name;
     any value;
   };


  /**
   * <p>A list of (name=string, value=any) tuples. The OMG standard 
   * NVList.  This is used for AttributeValueChange and StateChange 
   * notifications (see <a
   * href=supportingDocumentation/OMGServicesUsage.pdf> 
   * Guidelines for Using the OMG Notification and Telecom Log Service</a>).</p>
   **/
   typedef sequence<NameAndAnyValue_T> NVList_T;


  /**
   * </p>Describe transfer status type.  This is used for file transfer 
   * protocol notifications (see <a
   * href=supportingDocumentation/OMGServicesUsage.pdf> 
   * Guidelines for Using the OMG Notification and Telecom Log Service</a>).</p>
   **/

   enum FileTransferStatus_T
   {
    FT_IN_PROGRESS,
    FT_FAILED,
    FT_COMPLETED
   };

  
  /**
   * <p>Sequence of CosNotification::StructuredEvent</p>
   **/
   typedef sequence<CosNotification::StructuredEvent> EventList_T;


  /**
   * <p> Element of SpecificProblemList_T </p>
   **/
   typedef string SpecificProblem_T;


  /**
   * <p> The optional "X.733::SpecificProblems" parameter uses that type.</p>
   *
   * <p>When present in an alarm notification,
   * it identifies further refinements to the probable cause of the alarm.
   * This is consistent with the ITU-T X.733 definition. </p>
   **/
   
   typedef sequence <SpecificProblem_T> SpecificProblemList_T;


  /**
   * <p>List of notification IDs (field notificationId in the 
   * notifications).</p>
   **/
   typedef sequence<string> NotifIDList_T;


  /** 
   * <p> Correlated notifications are identified by the object that emitted 
   * the notification and the notification IDs.  Both are included in case 
   * the Notification IDs are not unique across objects. </p>
   *
   * <br>globaldefs::NamingAttributes_T <b>source</b>:
   * <br>source: Reference to object that emitted the correlated 
   * notification. If empty, the correlated notifications 
   * are from the same source as the notification containing 
   * this data structure.
   * <br>NotifIDList_T <b>notifIDs</b>: IDs of the correlated notifications. 
   * To use this structure, notification
   * identifiers must be chosen to be unique across all 
   * notifications from a particular managed object 
   * throughout the time that correlation is significant.</p>
   **/
   struct CorrelatedNotifications_T
   {
    globaldefs::NamingAttributes_T source; 
    NotifIDList_T notifIDs;
   };


  /**
   * <p> The optional "X.733::CorrelatedNotifications" parameter uses this 
   * type.</p>
   *
   * <p>When present in an alarm notification, it contains a set of 
   * notification identifiers and, if necessary, their associated 
   * object names.  This set is defined to be the set of all notifications 
   * to which this notification is considered to be correlated.
   * This is consistent with the ITU-T X.733 definition.</p>
   **/
   typedef sequence<CorrelatedNotifications_T> CorrelatedNotificationList_T;


  /**
   * <p> Element of ProposedRepairActionList_T </p>
   **/
   typedef string ProposedRepairAction_T;


  /**
   * <p> The optional "X.733::ProposedRepairActions" parameter uses this 
   * type.</p>
   *
   * <p>When present in an alarm notification, it
   * indicates if the cause is known and the system being managed 
   * can suggest one or more solutions (such as switch in standby equipment, 
   * retry, replace media).
   * This is consistent with the ITU-T X.733 definition. </p>
   **/
   
   typedef sequence<ProposedRepairAction_T> ProposedRepairActionList_T;

  /**
   * <p>AlarmId_T is used as a unique identifier of an alarm. It includes: 
   * </p>
   *
   * globaldefs::NamingAttributes_T <b>name</b>:
   * <br>The name represents the name of the entity that gave rise to
   * the alarm. See
   * <a href=supportingDocumentation/objectNaming.pdf>Object Naming</a>
   * for further detail on name structure.<br>
   *
   * transmissionParameters::LayerRate_T <b>layerRate</b>:
   * <br>Identifies the layerRate of the object raising the alarm. For objects 
   * where the layerRate is not applicable, such as EMS, the value is set to 
   * LR_Not_Applicable. LayerRate is applicable in alarms raised by objects 
   * such as PTPs.<br>
   *
   * string <b> probableCause </b>
   * <br> Probable cause identifies the type of alarm raised against the 
   * object.  
   * See <a href=supportingDocumentation/ProbableCauses.pdf>
   * Specification of probableCause strings</a>
   * for a description of the probable cause strings.<br>
   *
   * string <b> probableCauseQualifier </b>
   * <br>Probable cause qualifier is used as the final component of the unique 
   * identification of the alarm and is left blank where the objectName, 
   * layerRate and probableCause alone provide a unique identification of the 
   * alarm. <br>
   * 
   **/
   struct AlarmId_T
   {
    globaldefs::NamingAttributes_T objectName;
    transmissionParameters::LayerRate_T layerRate;
    string probableCause;
    string probableCauseQualifier;
   };

  /**
   * <p>TCAId_T is used as a unique identifier of a threshold crossing alert. 
   * It includes:</p>
   *
   * globaldefs::NamingAttributes_T <b>name</b>:
   * <br>The name represents the name of the entity that gave rise to
   * the TCA. See
   * <a href=supportingDocumentation/objectNaming.pdf>Object Naming</a>
   * for further detail on name structure.<br>
   *
   * transmissionParameters::LayerRate_T <b>layerRate</b>:
   * <br>Identifies the layerRate of the object raising the TCA. For objects 
   * where the layerRate is not applicable, such as EMS, the value is set to 
   * LR_Not_Applicable. LayerRate is applicable in alarms raised by objects 
   * such as PTPs.<br>
   *
   * performance::PMParameterName_T <b> pmParameterName </b>
   * <br>Hold the name of the performance measure.<br>
   *
   * performance::PMLocation_T <b> pmLocation </b>
   * <br>Hold the location and orientation of the measure.<br>
   *
   * performance::PMgranularity_T <b> granularity </b>
   * <br>Count period of the measure for which the threshold alert was 
   * raised.<br>
   **/
   struct TCAId_T
   {
    globaldefs::NamingAttributes_T objectName;
    transmissionParameters::LayerRate_T layerRate;
    performance::PMParameterName_T pmParameterName;
    performance::PMLocation_T pmLocation;
    performance::Granularity_T granularity;
   };

  /**
   * <p>Structure used for component of a mixed list of Alarms and TCAs.
   * The structure is switched on AlarmTypeQualifier_T. The contents
   * is either an alarm id or a TCA id.</p>
   **/
   union AlarmOrTCAIdentifier_T switch (AlarmTypeQualifier_T) 
   {
    case ALARM:  AlarmId_T alarmId;
    case TCA:    TCAId_T tcaId;
   };


  /**
   * <p>Sequence of identifiers for alarms and TCAs. </p>
   **/
  typedef sequence<AlarmOrTCAIdentifier_T>  AlarmAndTCAIDList_T;


  /**
   * <p>In order to allow the NMS to deal with a large number of objects,
   * iterators are used.</p>
   * <p>See <a href=supportingDocumentation/iterators.pdf>iterator overview</a>
   * for information on how iterators are used in this interface.</p>
   **/
   interface EventIterator_I 
    {
      boolean  next_n(in unsigned long how_many,
                      out EventList_T eventList)
               raises (globaldefs::ProcessingFailureException);

      unsigned long getLength()
                    raises (globaldefs::ProcessingFailureException);

      void destroy()
           raises (globaldefs::ProcessingFailureException);
    };


};

#endif

